База данных (БД) — это организованная структура, предназначенная для 
хранения информации. Обычно БД представляются в виде совокупности 
взаимосвязанных файлов или таблиц, предназначенных для решения 
конкретной задачи.

С понятием БД тесно связано понятие системы управления базой данных 
(СУБД). СУБД — это комплекс программных средств, предназначенных для 
создания структуры новой базы, наполнения ее содержимым, редактирования
содержимого и визуализации информации.
========================================================================
2 Основных типа
Реляционные БД
способ представления данных (структуру данных), методы защиты данных 
(целостность данных), и операции, которые можно выполнять с данными 
(манипулирование данными)
	PostgreSQL
	MySQL
	Oracle
	MS SQL
	SQLight (поддержка встроена в Python) ...
NoSQL
	MongoDB
	Redis
	HBASE
	Cassandra
	...
Реляционная база данных — база данных, основанная на реляционной модели 
данных. Понятие «реляционный» основано на англ. relation («отношение, 
зависимость, связь»). Использование реляционных баз данных было 
предложено доктором Коддом из компании IBM в 1970 году. Для работы с 
реляционными БД применяют реляционные СУБД.

• отношение  – это структура данных целиком, набор записей (в обычном 
понимании – таблица);
• кортеж – это каждая строка , содержащая данные (более распространенный 
термин – запись ), например, <001, Борин С.А, 234-01-23, программист>, 
все кортежи в отношении должны быть различны;
• мощность – число кортежей в таблице (проще говоря, число записей),
мощность отношения может быть любой (от 0 до бесконечности), 
порядок следования кортежей - неважен;
• атрибут – это столбец в таблице (более распространенный термин – поле )
• размерность – это число атрибутов в таблице;
• размерность отношения должна быть больше 0, порядок следования атрибутов существенен;
• домен атрибута – это допустимые значения (неповторяющиеся), которые можно 
занести в поле, например для атрибута Должность домен – {инженер, программист}.

Основные типы данных SQL:
INT INTEGER 
DECIMAL NUMERIC - Вещественное число,в скобках указывается максимальная
длина числа (включает символы слева и справа от десятичной запятой)
и количество знаков после запятой. DECIMAL(4,1) NUMERIC(6,3)
DATE - Дата в формате ГГГГ-ММ-ДД 26 июля 2020 года 3 января 2021 года
VARCHAR - Строка длиной не более 255 символов,в скобках указывается максимальная
длина строки, которая может храниться в поле
========================================================================
Важные аспекты
Данные представлены в виде таблиц
SQL - API(основной иструмент работы с данными)
Целостность данных
	PK - primary key
	FK - foreign key
	Constrains
Транзакции
ACID
	Атомарность(Atomic) Атомарность гарантирует, что никакая 
	транзакция не будет зафиксирована в системе частично.
	
	Единообразие(Consistency)
	
	Изолированность(Isolation)Во время выполнения транзакции 
	параллельные транзакции не должны оказывать влияния на её результат.
	
	Надежность(Durability)Другими словами, если пользователь 
	получил подтверждение от системы, что транзакция выполнена, 
	он может быть уверен, что сделанные им изменения не будут 
	отменены из-за какого-либо сбоя.
Index

========================================================================
Типы связей таблиц
One to one - используется для облегчения основной таблицы/если нельзя 
обновить основную таблицу то можно с помощью другой таблицы расширить
Many to one
Many to many
========================================================================
NoSQL
Базы данных NoSQL специально созданы для определенных моделей данных и 
обладают гибкими схемами, что позволяет разрабатывать современные 
приложения.

Типы баз данных NoSQL
	БД на основе пар «ключ‑значение»
	Документ
	Графовые БД
	БД в памяти
	Поисковые БД




========================================================================

SQL запросы - Stepik
Создание таблицы 
CREATE TABLE genre(
    genre_id INT PRIMARY KEY AUTO_INCREMENT, 
    name_genre VARCHAR(30)
);

Вставка записи в таблицу
INSERT INTO таблица(поле1, поле2) VALUES (значение1, значение2);

Посмотреть таблицу 
SELECT * FROM название таблицы;

Комментарии
/*
коммент
*/

Выборка отдельных столбцов
SELECT столбец, столбец FROM название таблицы;

Выборка отдельных столбцов и присвоение им новых имен (AS)
SELECT title AS Название, amount FROM book;

Выборка данных с созданием вычисляемого столбца
SELECT title, author, price, amount, price * amount AS total FROM book;

Математические функции 
• CEILING(x) - возвращает наименьшее целое число, большее или равное x - CEILING(4.2)=5
CEILING(-5.8)=-5
• ROUND(x, k) - округляет значение x до k знаков после запятой,
если k не указано – x округляется до целого - ROUND(4.361)=4 ROUND(5.86592,1)=5.9
• FLOOR(x) - возвращает наибольшее целое число, меньшее или равное x -
FLOOR(4.2)=4 FLOOR(-5.8)=-6
• POWER(x, y) - возведение x в степень y - POWER(3,4)=81.0
• SQRT(x) - квадратный корень из x - SQRT(4)=2.0 SQRT(2)=1.41...
• DEGREES(x) - конвертирует значение x из радиан в градусы - DEGREES(3) = 171.8...
• RADIANS(x) - конвертирует значение x из градусов в радианы
• ABS(x) - модуль числа x - ABS(-1) = 1 ABS(1) = 1
• PI() - pi = 3.1415926...

IF 
IF(логическое_выражение, выражение_1, выражение_2)
SELECT title, amount, price, IF(amount<4, price*0.5, price*0.7) AS sale FROM book;

Выборка данных по условию (WHERE)
SELECT title, author, price * amount AS total FROM book
WHERE price * amount > 4000;

Выборка данных, логические операции(И «and», ИЛИ «or», НЕ «not»)
SELECT title, author, price, amount FROM book WHERE (price < 500 OR price > 600) AND price * amount > 5000;

Выборка данных, операторы BETWEEN, IN
Оператор BETWEEN позволяет отобрать данные, относящиеся к некоторому 
интервалу, включая его границы.
SELECT title, amount FROM book WHERE amount BETWEEN 5 AND 14;
Оператор  IN  позволяет выбрать данные, соответствующие значениям из списка.
SELECT title, price FROM book
WHERE author IN ('Булгаков М.А.', 'Достоевский Ф.М.');

Выборка данных, оператор LIKE
Оператор LIKE используется для сравнения строк. В отличие от операторов 
отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки 
не на полное совпадение (не совпадение), а в соответствии с шаблоном.
• % - Любая строка, содержащая ноль или более символов - 
SELECT * FROM book WHERE author LIKE '%М.%'- выполняет поиск и выдает 
все книги, инициалы авторов которых содержат «М.»
• _ - Любой одиночный символ - SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

Вывести названия книг, которые состоят ровно из одного слова
SELECT title FROM book WHERE title NOT LIKE "% %";  

Выборка данных с сортировкой ORDER BY
ASC (по возрастанию) или DESC (по убыванию)
SELECT author, title, amount AS Количество FROM book WHERE price < 750
ORDER BY author, amount DESC;

1.3
DISTINCT - отобрать уникальные элементы некоторого столбца
SELECT DISTINCT amount FROM book;
Другой способ – использование оператора GROUP BY, который группирует 
данные при выборке, имеющие одинаковые значения в некотором столбце.

групповые функции SUM и COUNT
SELECT author AS Автор, COUNT(title) AS Различных_книг , SUM(amount) 
AS Количество_экземпляров FROM book GROUP BY author;

MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее 
значение элементов столбца, относящихся к группе.
SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена , 
AVG(price) AS Средняя_цена FROM book GROUP BY author;

HAVING - используется при GROUP BY замена WHERE
SELECT author,
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000; 

Порядок выполнения SQL запроса: 
FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY

Сложный запрос
SELECT author, SUM(price * amount) AS Стоимость
FROM book
WHERE title NOT IN ("Идиот", "Белая гвардия")
GROUP BY author
HAVING SUM(price*amount) > 5000
ORDER BY Стоимость DESC;

1.4
Вложенный запрос (подзапрос, внутренний запрос) – это запрос внутри другого 
запроса SQL.
Вложенный запрос, имеет следующие компоненты:
SELECT
FROM
WHERE
GROUP BY
HAVING

WHERE выражение оператор_сравнения (вложенный запрос);
WHERE выражение, включающее вложенный запрос;
WHERE выражение [NOT] IN (вложенный запрос);
WHERE выражение  оператор_сравнения  ANY | ALL (вложенный запрос)
Также вложенные запросы могут вставляться в основной запрос после ключевого 
слова SELECT

Вывести информацию (автора, название и цену) о  книгах, цены которых 
меньше или равны средней цене книг на складе. 
SELECT author, title, price
FROM book
WHERE price <= (SELECT AVG(price) FROM book)
ORDER BY price DESC;

Вывести информацию (автора, название и цену) о тех книгах, цены которых 
превышают минимальную цену книги на складе не более чем на 150 рублей в 
отсортированном по возрастанию цены виде.
SELECT author, title, price
FROM book
WHERE (price - (SELECT MIN(price) FROM book)) < 150
ORDER BY price;

оператор IN
Вывести информацию о книгах тех авторов, общее количество экземпляров 
книг которых не менее 12.
SELECT title, author, amount, price
FROM book
WHERE author IN (
        SELECT author 
        FROM book 
        GROUP BY author 
        HAVING SUM(amount) >= 12
      );

Операторы ANY и ALL
Операторы ANY и ALL используются  в SQL для сравнения некоторого значения с р
езультирующим набором вложенного запроса, состоящим из одного столбца.

amount > ANY (10, 12) эквивалентно amount > 10
amount < ANY (10, 12) эквивалентно amount < 12
amount = ANY (10, 12) эквивалентно (amount = 10) OR (amount = 12), а также amount IN  (10,12)
amount <> ANY (10, 12) вернет все записи с любым значением amount, включая 10 и 12

amount > ALL (10, 12) эквивалентно amount > 12
amount < ALL (10, 12) эквивалентно amount < 10
amount = ALL (10, 12) не вернет ни одной записи, так как эквивалентно (amount = 10) AND (amount = 12)
amount <> ALL (10, 12) вернет все записи кроме тех,  в которыхamount равно 10 или 12


1.5 Запросы корректировки данных
Добавление записей из другой таблицы
1.количество полей в таблице и количество полей в запросе должны совпадать;
2.должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, поэтому первый столбец запроса должен относиться к первому столбцу в списке столбцов таблицы, второй – ко второму столбцу и т.д.
3.типы столбцов запроса должны быть совместимы с типами данных соответствующих столбцов таблицы ( целое число можно занести в поле типа DECIMAL, обратная операция – недопустима).

Запросы на обновление
UPDATE таблица SET поле = выражение
Уменьшить на 30% цену тех книг в таблице book, количество которых меньше 5.
UPDATE book 
SET price = 0.7 * price 
WHERE amount < 5;

Запросы на обновление нескольких столбцов
UPDATE таблица SET поле1 = выражение1, поле2 = выражение2

Запросы на обновление, несколько таблиц
для столбцов, имеющих одинаковые имена, необходимо указывать имя таблицы, к которой они относятся, например, book.price – столбец price из таблицы book, supply.price – столбец price из таблицы supply;
все таблицы, используемые в запросе, нужно перечислить после ключевого слова UPDATE;
в запросе обязательно условие WHERE, в котором указывается условие при котором обновляются данные.
UPDATE book, supply 
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

Запросы на удаление
DELETE FROM таблица; - удалить все записи таблицы

DELETE FROM таблица
WHERE условие;

Запросы на создание таблицы
CREATE TABLE имя_таблицы AS
SELECT ...

CREATE TABLE ordering AS
SELECT author, title, 5 AS amount
FROM book
WHERE amount < 4;

Для вычитания двух дат используется функция DATEDIFF(дата_1, дата_2)
DATEDIFF('2020-04-01', '2020-03-28')=4


2.1 Связи между таблицами
Создание таблицы с внешними ключами
FOREIGN KEY (связанное_поле_зависимой_таблицы)  
REFERENCES главная_таблица (связанное_поле_главной_таблицы)

Действия при удалении записи главной таблицы ON DELETE
CASCADE: автоматически удаляет строки из зависимой таблицы при удалении  связанных строк в главной таблице.
SET NULL: при удалении  связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение NULL. (В этом случае столбец внешнего ключа должен поддерживать установку NULL).
SET DEFAULT похоже на SET NULL за тем исключением, что значение  внешнего ключа устанавливается не в NULL, а в значение по умолчанию для данного столбца.
RESTRICT: отклоняет удаление строк в главной таблице при наличии связанных строк в зависимой таблице.

2.2 Запросы на выборку, соединение таблиц
Соединение INNER JOIN
SELECT
 ...
FROM
    таблица_1 INNER JOIN  таблица_2
    ON условие
...
каждая строка одной таблицы сопоставляется с каждой строкой второй таблицы;
для полученной «соединённой» строки проверяется условие соединения;
если условие истинно, в таблицу результата добавляется соответствующая «соединённая» строка;

Внешнее соединение LEFT и RIGHT OUTER JOIN
LEFT
1. в результат включается внутреннее соединение (INNER JOIN) первой и второй таблицы в соответствии с условием;
2. затем в результат добавляются те записи первой таблицы, которые не вошли во внутреннее соединение на шаге 1, для таких записей соответствующие поля второй таблицы заполняются значениями NULL.
Соединение RIGHT JOIN действует аналогично, только в пункте 2 первая таблица меняется на вторую и наоборот.

Перекрестное соединение CROSS JOIN
SELECT
 ...
FROM
    таблица_1 CROSS JOIN  таблица_2
...

Запросы на выборку из нескольких таблиц
SELECT
 ...
FROM
    first INNER JOIN  second
    ON first.first_id = second.first_id
        INNER JOIN  third
         ON second.second_id = third.second_id
...

использование USING()
Вариант с ON
SELECT title, name_author, author.author_id /* явно указать таблицу - обязательно */
FROM 
    author INNER JOIN book
    ON author.author_id = book.author_id;

Вариант с USING
SELECT title, name_author, author_id /* имя таблицы, из которой берется author_id, указывать не обязательно*/
FROM 
    author INNER JOIN book
    USING(author_id);



========================================================================
DB Sqlite - встроенна в python
Особенности:
	Хранит данные в файле или памяти
	Не поддерживает ролевой модели
Подходит для:
	БД встроенных приложений
	Небольшие приложения
	Прототипирования

import sqlite3 # no need to install
conn = sqlite3.connect("test_db.sqlite")#создаем бд или коннектикмся уже
					к созданной
c = conn.cursor()#получаем курсор чтобы можно было посылать запросы
#получаем из sqlite_master
c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")

c.execute("""
CREATE table if not exists #создать таблицу если не существует
    users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        email TEXT UNIQUE
    );
""")

c.execute("""
create table if not exists 
    cars ( #вторая таблица cars
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        model TEXT UNIQUE,
        user_id INTEGER,
        FOREIGN KEY(user_id) REFERENCES users(id)
    );
""")

c.execute("SELECT name FROM sqlite_master WHERE type='table';")
print(c.fetchall()) #[('users',), ('sqlite_sequence',), ('cars',)]
========================================================================
Insert some data - вставление информации
c.execute("""INSERT INTO users (name, email) VALUES ('Mike','mike@example.com')""")
c.execute("""INSERT INTO users (name, email) VALUES ('Nick','nick@example.com')""")
conn.commit() #выполнить вставление
========================================================================
Get data
c.execute("""SELECT * FROM users""")
print(c.fetchall()) #[(1, 'Mike', 'mike@example.com'), (2, 'Nick', 'nick@example.com')]
c.execute("""SELECT * FROM users WHERE id=2""")
print(c.fetchall()) #[(2, 'Nick', 'nick@example.com')]
========================================================================
Insert some related data
c.execute("""INSERT INTO cars (model, user_id) VALUES ('Лада-Калина', 1)""")
c.execute("""INSERT INTO cars (model, user_id) VALUES ('Лада (Ваз 2109)', 1)""")
c.execute("""INSERT INTO cars (model, user_id) VALUES ('УАЗ Патриот', 2)""")
c.execute("""INSERT INTO users (name, email) VALUES ('Boris','boris@example.com')""")
conn.commit()
c.execute("""SELECT * FROM cars""")
print(c.fetchall())#[(1, 'Лада-Калина', 1), (2, 'Лада (Ваз 2109)', 1), (3, 'УАЗ Патриот', 2)]
c.execute("""INSERT INTO cars (model, user_id) VALUES ('КаВЗ1', 6)""") #должна быть ошибка но хз почему нету
conn.commit()
c.execute("""SELECT u.id, u.name, u.email, c.model FROM users u LEFT JOIN cars c ON u.id=c.user_id""")
print(c.fetchall())
Вывод таблицей:
print("id\t", "name\t", "email\t", "car")
for row in c.fetchall():
    print(*row, sep="\t")
Посчитать сколько машин у каждого:
c.execute("""SELECT u.id, u.name, u.email, count(c.model) FROM users u LEFT JOIN cars c ON u.id=c.user_id GROUP BY u.email""")
print("id\t", "name\t", "email\t", "cars")
for row in c.fetchall():
    print(*row, sep="\t")
========================================================================
ORM - мы вместо работы таблицами работаем с классами, тоесть таблицы
это классы
"""
https://www.sqlalchemy.org/

pip install sqlalchemy
"""
import os
import sys
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine

Base = declarative_base()

from creds impors LOGIN, PASSS

class Users(Base):
    __tablename__ = 'users'
    # Here we define columns for the table users
    # Notice that each column is also a normal Python instance attribute.
    id = Column(Integer, primary_key=True)
    name = Column(String(250), nullable=False)
    email = Column(String(250), nullable=False)
    cars = relationship("Cars", back_populates="user")

class Cars(Base):
    __tablename__ = 'cars'
    # Here we define columns for the table cars.
    # Notice that each column is also a normal Python instance attribute.
    id = Column(Integer, primary_key=True)
    model = Column(String(250))
    user_id = Column(Integer, ForeignKey('users.id'))
    user = relationship(Users, back_populates="cars")


# Create an engine that stores data in the local directory's
# sqlalchemy_example.db file.
engine = create_engine(url="google.com:5432", db_mane="test_db", user=LOGIN, password="sdjkhdsjkhsdjkhnbdc!@dfjkfvd")

# Create all tables in the engine. This is equivalent to "Create Table"
# statements in raw SQL.
Base.metadata.create_all(engine)