1.2 - https://stepik.org/media/attachments/lesson/12527/lesson.pdf
Internet - глобальная сеть передачи данных
Протоколы
• HTTP, SSH, P2P - прикладные протоколы
• DNS - система имен
• TCP - надежная последовательная передача данных
• IP - глобальная адресация, передача в гетерогенной среде

WWW - множество взаимосвязанных документов,
располагающихся на машинах подключенных к Internet
WWW - набор протоколов, серверного и клиентского ПО,
позволяющих получать доступ к документам

Типы документов (MIME-типы)
• text/html
• text/css
• text/javascript
• image/png
• video/mp4
• text/xml
• application/json
Расширения файлов играют второстепенную роль

Документы могут быть
• Статические
	Это файлы на дисках сервера
 	Как правило, обладают постоянным адресом
• Динамические
 	Создаются на каждый запрос
 	Содержимое зависит от времени и пользователя
 	Адрес может быть постоянным или меняться

URL - unified resource locator
http://server.org:8080/path/doc.html?a=1&b=2#part1
• http - протокол
• server.org - DNS имя сервера
• 8080 - TCP порт
• /path/doc.html - путь к файлу
• a=1&b=2 - опции запроса
• part1 - якорь, положение на странице

Абсолютные и относительные URL
• http://server.org/1.html - абсолютный
• //server.org/1.html - абсолютный (schemeless)
• /another/page.html?a=1 - относительный (в пределах домена)
• pictures/1.png - относительный (от URL текущего документа)
• ?a=1&b=2 - относительный (от URL текущего документа)
• #part2 - относительный (в пределах текущего документа)

Правила разрешения URL
https://site.com/path/page.html - основной документ
+ http://wikipedia.org = http://wikipedia.org
+ //cdn.org/jquery.js = https://cdn.org/jquery.js
+ /admin/index.html = https://site.com/admin/index.html
+ another.html = https://site.com/path/another.html
+ ?full=1 = https://site.com/path/page.html?full=1
+ #chapter2 = https://site.com/path/page.html#chaprer2

Клиент-серверная архитектура
Web-клиенты работают на компьютерах конечных пользователей.
Задача Web-клиентов состоит в получении и отображении
документов.
Web-сервера работают (как правило) на серверах в датацентрах.
Их задача заключается в хранении (или генерации) и отдачи
документов.

1.3 - https://stepik.org/media/attachments/lesson/12528/lesson.pdf
Разновидности web-клиентов
• Библиотеки в ЯП: libcurl, urllib, и т.д.
• Консольные утилиты: wget, curl, telnet!
• Роботы: поисковики, вредоносные скрипты
• Браузеры:
• Полноценные: firefox, chrome и т.д.
• Встроенные: web-view, webkit и т.д.

Особенности библиотек webклиентов
• Предоставляют максимум опций для работы с HTTP
• Осуществляют кодирование / декодирование данных
• Перенаправления, куки - опционально
Назначение: используются внутри других программ для простой
работы c HTTP

Назначение консольных клиентов
• Автоматизация в shell-скриптах
• Создание "статической копии сайта"
• Отладка web-приложений

Telnet - это простейшее средство отладки. telnet открывает tcp
соединение и связывает его с консолью, позволяя общаться с 
webсервером напрямую с клавиатуры.

Еще примеры отладки
GET запрос к серверу с отображением всех заголовков:
curl -vv 'http://api.site.com/method/?arg=1'
POST запрос к серверу с авторизацией и передачей доп.
заголовков:
curl -vv -d 'arg=1' -H'X-Token: 123'
'http://api.site.com/method/'

Браузер
Сценарий работы web приложения
• Пользователь вводит URL
• Браузер загружает Web страницу - HTML документ
• Браузер анализирует (parse) HTML и загружает доп. ресурсы
• Браузер отображает (rendering) HTML страницу
• Пользователь переходит по гиперссылке или отправляет форму
• Цикл повторяется

Сценарий работы современного
приложения
• Браузер загружает Web страницу, ресурсы и отображает ее
• JavaScript загружает данные с помощью AJAX запросов
• JavaScript обеспечивает полноценный UI на странице
• Пользователь взаимодействуюет с UI, что приводит к вызову
JavaScript обработчиков
• JavaScript обновляет данные на сервере или загружает новые
данные, используя AJAX

Особенности современных Webприложений
• UI находится на 1 или нескольких страницах (one-page)
• UI полностью статичен: HTML, CSS, JS - статические файлы
• Логика UI полностью работает на стороне клиента
• Используется шаблонизация в JavaScript
• Application сервер возвращает чистые данные (JSON или XML, а не
HTML)

1.4 - https://stepik.org/media/attachments/lesson/14820/lesson.pdf
HTML
Особенности HTML разметки
• Произвольный регистр: <BR> == <br>
• Атрибуты без скобок: color=red
• Сокращенные атрибуты: disabled
• Непарные тэги: <p> вместо <p></p>
• Перестановки тэгов: <b><i></b></i>
• «Свои» тэги: <magic></magic>

Особенности XHTML разметки
• Только нижний регистр тэгов
• Атрибуты со скобками: color=”red”
• Атрибуты – без сокращений: disabled=”disabled”
• Тэги всегда парные: <p></p>
• Строгая вложенность: <i><b></b></i>
• id вместо name
• Необходим DOCTYPE

DOCTYPE
DOCTYPE уточняет тип содержимого, указывает HTML парсеру как
правильно разбирать данный документ.
XHTML 1.1
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
HTML 4 Transitional
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01
Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
HTML5
<!DOCTYPE html>

Тэги верхнего уровня
• html - обертка
• head - заголовок страницы, не отображается
• body - тело страницы, то, что видит пользователь
Тэги внутри head
• title - отображается в заголовке окна браузера
• meta - содержит информацию для user-agentов
<meta name="description" content="Для друзeй">
<meta http-equiv="Content-Type" content="text/html;
charset=utf-8">
link - указание связанных ресурсов, например CSS
<link rel="stylesheet" href="/style.css">
<link rel="alternate" href="/news.rss"
type="application/rss+xml">
• script - загрузка JavaScript
<script src="./jquery.js" charset="windows-1251" async>
</script>

Рекомендацим по link и script
Загрузку CSS (тэг link ) рекомендуется ставить в тэге head , а
загрузку JavaScript (тэг script ) - наоборот ближе к концу
странице. Это повышает скорость отрисовки страницы.

Блочные тэги
• h1 - h6 ― различные уровни заголовков
• p ― разбиение текста на параграфы
• hr ― горизонтальная линия
• pre ― блок преформатированного кода, например исходный код
• blockquote ― цитирование длинного блока текста
• div ― абстрактный блочный контейнер

Строчные тэги
• a ― гиперссылки
• em , i ― акцентирование
• strong , b ― выделение
• img ― вставка изображений
• sub ― нижний индекс
• sup ― верхний индекс
• span ― абстрактный строчный контейнер

Списки в HTML
ul , ol , li - маркированные списки
<ul>
<li><code>a</code> ― гиперссылки</li>
<li><code>em</code> ― акцентирование</li>
</ul>

Таблицы 
table, tr, td

Гиперссылки
<a href="http://duckduckgo.com" target="_blank">
<img src="duck.png">
</a>
• href - URL гиперссылки
• target - в каком окне открывать ссылку
• name - имя якоря, вместо href

Действия браузера при переходе
Поведение браузера зависит от протокола в URL
• http , https , ftp - переход по ссылке
• mailto - запуск почтового клиента
• javascript - выполнение JavaScript кода
• #anchor - прокрутка текущей страницы

Формы
<form method="POST" action="/add/"
enctype="multipart/form-data" target="frame3">
<input name="image" type="file">
<input name="id" type="hidden" value="3">
<input name="nick" type="text">
<input type="submit" value="Отправить">
<button type="submit" name="action" value="more">
Все равно отправить
</button>
</form>

Аттрибуты формы
• action - URL, на который будет отправлена форма
• metod - HTTP метод, GET или POST
• target - имя окна браузера, в котором открыть результат
• enctype - способ кодирования данных формы. По умолчанию -
application/x-www-form-urlencoded . Если форма содержит
поля для ввода файлов, то должно быть multipart/form-data

application/x-www-form-urlencoded
Это способ кодирования данных формы для передачи через URL.
Допустим есть форма со следующими данными:
id: 3
name: Вася
friend_id: [4, 5]
В закодированном виде это буде выглядеть так:
id=3&name=%D0%92%D0%B0%D1%81%D1%8F&friend=4&friend=5

Элементы ввода формы
• input - универсальное поле, может быть:
• type="hidden" - невидимое
• type="text" - текстовое поле
• type="password" - вместо текста будет отображатся *
• type="checkbox" - checkbox, переключатель да/нет 
• type="radio"
• button - кнопка
• textarea - многострочное поле ввода
• select , option - выпадающий список

Атрибуты элементов ввода
type - определяет внешний вид и функционал
• name - имя, с которым данный элемент попадет в запрос
• value - начальное знаечение, пользователь может изменить
• placeholder - подсказка для пользователя

1.5 - https://stepik.org/media/attachments/lesson/14821/lesson.pdf
CSS
Как задать оформление страницы ?
HTML, в отличие от XML, обладает семантикой, т.е. браузер знает
как отображать тот или иной HTML тэг. В HTML есть тэги для
управления внешним видом ( color , font , big , ...), но их
возможности явно недостаточны.
Решение - описывать внешний вид отдельно от структуры
документа c помощью языка Cascading Style Sheets.

Где могут быть заданы стили?
• Встроенные в браузер стили
• Во внешнем файле
<link rel="stylesheet" href="style.css">
• В коде HTML документа
<style>...</style>
• Стили могут быть привязаны к конкретному тэгу
<img style="margin: 3px" src="...">

Какие бывают стили ?
• width , height ― размеры элемента
• margin , padding ― границы и отступы
• display , visibility ― режим отображения
• top , left , right , bottom ― расположение
• background ― фон элемента
• font ― управление шрифтом
• text-align ― выравнивание текста

Классы и идентификаторы
<div id="userpic"><img src="..."></div>
<button class="btn btn-main">Одобрить</div>
<button class="btn">Написать комментарий</div>
• id - идентификатор элемента, должен быть уникален на странице
• class - список классов элемента, классы могут повторяться

Базовые селекторы
• Универсальный селектор
* { margin: 0px; padding: 0px; border: 0px; }
• Имена тэгов
p { margin-top: 10px; }
• Имена классов (с точки)
.btn { border: solid 1px gray; }
• id тэгов (с решетки)
#userpic { padding: 10px }

Сложные селекторы
• контекстные (вложенные)
div.article a { text-decoration: underline }
• дочерние (вложенность = 1 уровень)
a > img { border: 2px }
• соседние
h2.sic + p { margin-left: 30px }
• группировка
h1, h2 { color: red }

Псевдоклассы
• a:visited ― посещенная ссылка
• a:link ― непосещенная ссылка
• div:hover ― элемент при наведении мыши
• input:focus ― элемент при получении фокуса
• li:first-child ― выбирает первого потомка среди множества
элементов

Псевдоэлементы
• #el:after ― виртуальный элемент сразу после #el
• #el:before ― виртуальный элемент непосредственно перед #el
.jack-sparrow:before {
content: "Captain ";
display: inline;
}

Приоритеты стилей
В случае, если два разных стиля конфликтуют между собой,
применяется тот, что обладает большей специфичностью. Если
специфичность двух стилей совпадает, применяется тот, что
расположен ниже в HTML/CSS коде.
Указание в значение стиля флага !important позволяет
перекрыть проверку специфичности.

Правила расчета специфичности
• id – 100
• классы и псевдоклассы – 10
• тэги и псевдоэлементы – 1
Так, например, селектор ul.info ol + li обладает
специфичностью 13, а селектор li.red.level специфичностью
21 балл

Режимы отображения элементов
• display: none ― элемент невидим, не занимает места
• display: block ― элемент занимает максимальную ширину,
начинается с новой строки, учитывает width, height
• display: inline ― элемент занимает минимальную ширину, и
не прерывает строку, игнорирует width, height
• display: inline-block ― блочный элемент, но не разрывает
строку, примерно как img

float: left - всплывание влево, float: right - всплывание
вправо, clear: both - отменяет всплывание, «проводит черту»

Позиционирование
• position: static ― обычное расположение
• position: relative ― смещение относительно начального
местоположения на странице
• position: absolute ― если родитель relative, absolute или fixed
– относительно родителя, иначе - относительно начала документа
• position: fixed ― относительно окна браузера
• top/right/bottom/left - отступы, могут быть отрицательными

Что такое Bootstrap?
Bootstrap - это готовая библиотека стилей (CSS-фреймворк) от
Twitter. Bootstrap позволяет быстро разработать приемлемый
дизайн даже при базовых знаниях CSS.

Что включает в себя Bootstrap?
• Шаблон страниц
• Сетка
• Современные «стили по умолчанию»
• Верстка: таблицы, формы, списки, кнопки, …
• Компоненты: навигация, меню, пагинатор, …
• JavaScript плагины

Сетка Bootstrap
<div class="row">
<div class="col-md-4 col-lg-2">LEFT</div>
<div class="col-md-8 col-lg-10">CONTENT</div>
</div>

1.6* - https://stepik.org/media/attachments/lesson/14823/lesson.pdf
Как происходит HTTP запрос ?
• Браузер анализирует введенный URL и извлекает имя хоста
• Используя систему DNS, браузер преобразует домен в ip адрес
• Устанавливает TCP соединение с web-сервером
• Если протокол https, устанавливает TLS соединение поверх TCP
• Формирует HTTP запрос, отправляет его, HTTP ответ
• Браузер закрывает соединение (для HTTP/1.0)
• Далее процесс парсинга и отображения документа ...

Domain Name System
DNS - это распределенная база данных, хранящая информацию о
доменах, в первую очередь отображение доменных имен на IP
адреса машин, обслуживающих эти домены

Домены и зоны
База DNS разделена на зоны. Каждая зона находится под единым
административным контролем. Проще говоря обслуживается
одной организацией.
Хранение информации о доменах более высокого уровня может
быть делегировано другим зонам.

Что содержит зона DNS сервера ?
• A - IPv4 адрес(а) для данного домена
• AAAA - IPv6 адрес(а)
• NS - адрес(a) DNS серверов обслуживающих данную зону
• MX - адрес(а) почтовых серверов для данного домена

Зачем нужен TCP ?
TCP - протокол, обеспечивающий надежную последовательную
доставку данных. Фактически, TCP предоставляет интерфейс,
похожий на файловый ввод/вывод для сетевых соединений.
• Надежная доставка
• Полнодуплексная передача
• Контроль потока - защита от переполнения

TCP порты
TCP порт - это «адрес» сетевого соединения в пределах одного
хоста. TCP порты позволяют поддерживать множество открытых
соединений на одной машине.
Номер порта - целое число, не больше 65535. Порты ниже 1024
требуют привилегий суперпользователя для использования.

Стандартные TCP порты
• 20,21 - FTP
• 22 - SSH
• 25 - SMTP
• 80 - HTTP
• 443 - HTTPS

Пример TCP клиента
import socket
req = "Hello tcp!"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 1234))
s.send(req)
rsp = s.recv(1024)
s.close()

Пример TCP сервера - echo
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 1234))
s.listen(10)
while True:
conn, addr = s.accept()
while True:
data = conn.recv(1024)
if not data: break
conn.send(data)
conn.close()

Как правильно читать данные из
сокета ?
def myreceive(sock, msglen):
msg = ''
while len(msg) < msglen:
chunk = sock.recv(msglen-len(msg))
if chunk == '':
raise RuntimeError("broken")
msg = msg + chunk
return msg

Как правильно записывать данные
в сокет ?
def mysend(sock, msg):
totalsent = 0
while totalsent < len(msg):
sent = sock.send(msg[totalsent:])
if sent == 0:
raise RuntimeError("broken")
totalsent = totalsent + sent


TLS - Transport Layer Security
TLS (а ранее SSL) - криптографический протокол, обеспечивающий
безопасную передачу данных между хостами в Internet.
• Аутентификация сервера (и клиента)
• Шифрование и сжатие передаваемой информации
• Защита от подмены и проверка целостности сообщений

ClientHello - клиент указывает желаемые опции соединения
• ServerHello - сервер подтверждает опции соединения
• Certificate - сервер посылает клиенту свой сертификат
• Клиент проверяет сертификат.
На данном этапе соединение может быть отклонено
• ClientKeyExchange - клиент отправляет серверу ключ
симметричного шифрования (или параметры для его генерации)
• Finished - сервер подтверждает завершение рукопожатия

Неутешительный вывод
Установление TCP и TLS соединения требует существенного
времени. Минимум 1 RTT для TCP соединения и 1-2 RTT для TLS
соединения.
Под RTT понимается Round Trip Time - время, необходимое для
передачи IP дейтаграммы к серверу и обратно.

1.7 - https://stepik.org/media/attachments/lesson/14824/lesson.pdf
Какие задачи решает HTTP?
• Передача документов
• Передача мета-информации
• Авторизация
• Поддержка сессий
• Кеширование документов
• Согласование содержимого (negotiation)
• Управление соединением

Ключевые особенности HTTP
• Работает поверх TCP/TLS
• Протокол запрос-ответ
• Не поддерживает состояние (соединение) - stateless
• Текстовый протокол
• Расширяемый протокол

HTTP/1.0 запрос
GET http://www.ru/robots.txt HTTP/1.0
Accept: text/html, text/plain
User-Agent: telnet/hands
If-Modified-Since: Fri, 24 Jul 2015 22:53:05 GMT
Перевод строки - \r\n

HTTP/1.1 запрос
GET /robots.txt HTTP/1.1
Accept: text/html,application/xhtml+xml
Accept-Encoding: gzip, deflate
Cache-Control: max-age=0
Connection: keep-alive
Host: www.ru
User-Agent: Mozilla/5.0 Gecko/20100101 Firefox/39.0

HTTP/1.1 ответ
HTTP/1.1 404 Not Found
Server: nginx/1.5.7
Date: Sat, 25 Jul 2015 09:58:17 GMT
Content-Type: text/html; charset=iso-8859-1
Connection: close
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>...

HTTP запрос состоит из
• строка запроса
• метод
• URL документа
• версия
• заголовки
• тело запроса

HTTP методы
• GET - получение документа
• HEAD - получение только заголовков
• POST - отправка данных на сервер
• PUT - отправка документа на сервер (*)
• DELETE - удаление документа (*)
• CONNECT, TRACE, OPTIONS - используются редко (*)
• COPY, MOVE, MKCOL - расширения WebDAV (*)

HTTP ответ состоит из
• строка ответа
• метод
• URL документа
• версия
• заголовки
• тела ответа - документ

HTTP коды ответа
• 1xx - информационные
• 2xx - успешное выполнение
• 3xx - перенаправления
• 4xx - ошибка на стороне клиента
• 5xx - ошибка на стороне сервера

HTTP коды ответа (1)
• 200 OK - запрос успешно выполнен
• 204 No Content - запрос успешно выполнен, но документ пуст
• 301 Moved Permanently - документ сменил URL
• 302 Found - повторить запрос по другому URL
• 304 Not Modified - документ не изменился, использовать кеш

HTTP коды ответа (2)
• 400 Bad Request - неправильный синтаксис запроса
• 401 Unauthorized - требуется авторизация
• 403 Forbidden - нет доступа (неверная авторизация)
• 404 Not Found - документ не найден
• 500 Internal Server Error - неожиданная ошибка сервера (application)
• 502 Bad Gateway - проксируемый сервер отвечает с ошибкой
• 504 Gateway Timeout - проксируемый сервер не отвечает

Заголовки HTTP (общие)
Для управления соединением и форматом сообщения (документа)
• Content-Type - MIME тип документа
• Content-Length - длина сообщения
• Content-Encoding - кодирование документа, например gzip-сжатие
• Transfer-Encoding - формат передачи, например, chunked
• Connection - управление соединением
• Upgrade - смена протокола

Заголовки HTTP запросов
• Authorization - авторизация, чаще всего логин/пароль
• Cookie - передача состояния (сессии) на сервер
• Referer - URL предыдущего документа, контекст запроса
• User-Agent - описание web-клиента, версия браузера
• If-Modified-Since - условный GET запрос
• Accept-* - согласование (negotiation) содержимого

Заголовки HTTP ответов
• Location - новый URL документа при перенаправлениях
• Set-Cookie - установка состояния (сессии) в браузере
• Last-Modified - дата последнего изменения документа
• Date - Дата на сервере, для согласования кешей
• Server - описание web-сервера, название и версия

Общие принципы
Протокол HTTP/1.0 предполагает закрытие TCP соединения сразу
после ответа сервера.
Протокол HTTP/1.1 предполагает удержание TCP соединения, если
не было заголовка Connection: close .

Логика управления в HTTP/1.1
Соединение должно быть закрыто, если:
• cервер или клиент использует HTTP младше 1.1
• cервер или клиент передал заголовок Connection: close
• по истечении таймаута (обычно небольшой, около 10с)
Иначе соединение остается открытым для последующих запросов.

1.8 - https://stepik.org/media/attachments/lesson/14825/lesson.pdf
Web сервера
APACHE - NGIN - LIGHTTPD - IIS7
Запуск web сервера
• Команда на запуск
sudo /etc/init.d/nginx start
• Чтение файла конфигурации
• Получение порта 80
• Открытие (создание) логов
• Понижение привилегий
• Запуск дочерних процессов/потоков (*)
• Готов к обработке запроса

Файлы web сервера
• Конфиг /etc/nginx/nginx.conf
include /etc/nginx/sites-enabled/*
• Init-скрипт /etc/init.d/nginx [start|stop|restart]
• PID-файл /var/run/nginx.pid
• Error-лог /var/log/nginx/error.log
• Access-лог /var/log/nginx/access.log

Процессы web сервера
• Master (root, 1 процесс)
• Чтение и валидация конфига
• Открытие сокета (ов) и логов
• Запуск и управление дочерними процессами (worker)
• Graceful restart, Binary updates
• Worker (www-data, 1+ процессов)
• Обработка входящих запросов

Модульная архитектура
• web сервер – не монолитный
• Динамическая загрузка модулей - LoadModule
• Этапы обработки запроса и модули
• Дополнительные директивы, контексты
• Примеры: mod_mime, mod_mime_magic, mod_autoindex,
mod_rewrite, mod_cgi, mod_perl, mod_gzip

Терминология
virtual host, вирт. хост - секция конфига web сервера, отвечающая
за обслуживание определенного домена
location - секция конфига, отвечающая за обслуживание
определенной группы URL

Секции и директивы
• http ― конфигурация для HTTP сервера
• server ― конфигурация домена (вирт. Хоста)
• server_name ― имена доменов
• location ― локейшен, группа URL
• root , alias ― откуда нужно брать файлы
• error_log ― лог ошибок сервера
• access_log ― лог запросов

Приоритеты location в nginx
• location = /img/1.jpg
• location ^~ /pic/
• location ~* \.jpg$
• location /img/
При одинаковом приоритете используется тот location, что
находится выше в конфиге.

Отдача статических документов
location ~* ^.+\.(jpg|jpeg|gif|png)$ {
root /www/images;
}
location /sitemap/ {
alias /home/www/generated/;
}
/2015/10/ae2b5.png → /www/images/2015/10/ae2b5.png
/sitemap/index.xml → /home/www/generated/index.xml

Как узнать атрибуты ?
$ ps -o pid,euser,egroup,comm,args -C nginx
PID EUSER EGROUP COMMAND
29731 root root nginx: master process /usr/sbin/nginx
29732 www-data www-data nginx: worker process
29733 www-data www-data nginx: worker process
29734 www-data www-data nginx: worker process
29737 www-data www-data nginx: worker process
$ ls -lah www/index.html
-rw-r--r-- 1 nuf users 156K Feb 6 21:15 www/index.html

Проверка доступа
Для того, чтобы открыть файл, необходимо иметь права на чтение
r самого файла и на исполнение x директорий, в которых он
находится. Наличие прав проверяется следующим образом:
• Если совпадает пользователь -rw-r--r--
• Если совпадает группа -rw-r--r--
• Иначе -rw-r--r--

Простейший TCP сервер
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 8080))
s.listen(10)
while True:
conn, addr = s.accept()
path = conn.recv(512).decode('utf8').rstrip("\r\n")
file = open('/www' + str(path), 'r')
data = file.read().encode('utf8')
conn.sendall(data)
file.close(); conn.close()

Решение проблемы
• множество потоков - multithreading
• множество процессов - prefork, pool of workers
• комбинированный подход

Плюсы и минусы prefork
➕ простота разработки
➕ можно использовать любые библиотеки
➖ большое потребление памяти: 1 клиент = 1 процесс
➖ проблема с долгоживущими соединениями

Плюсы и минусы multithreading
По сравнению с prefork,
➕ экономия памяти: 1 клиент = 1 поток
➖ требует аккуратной работы с памятью
➖ как следствие, накладывает ограничение на выбор библиотек


Мультиплексирование
readsocks, writesocks = [...], [...] # сокеты
while True:
readables, writeables, exceptions = \
select(readsocks, writesocks, [])
for sockobj in readables:
data = sockobj.recv(512)
if not data:
sockobj.close()
readsocks.remove(sockobj)
else:
print('\tgot', data, 'on', id(sockobj))

Event-driven разработка
• множество открытых файлов
• select, kqueue, epoll, aio...
• последовательное исполнение → события

Плюсы и минусы
➕ быстро, программа не блокируется
➕ экономия памяти: 1 клиент = 1 объект
➕ обработка большого количества клиентов
➕ обработка медленных или долгоживущих соединений
➖ тяжело программировать
➖ использование блокирующих вызовов все портит

Кто есть кто
• Apache – prefork, worker, threads, С
• Tomcat, Jetty – threads, Java
• Starman, Gunicorn – prefork, языки высокого уровня
• Nginx, Lighttpd – асинхронные, С
• Node.JS, Tornado – асинхронные, языки высокого уровня