2.1
git init - инициализация git 
git clone <url> - копируем репозиторий 
git add - добавить файлы
git commit - коммит
git push - изменения на сервер

	CONFIG
1.Файл /etc/gitconfig содержит значения, общие для всех 
пользователей системы и для всех их репозиториев. 
Если при запуске git config указать параметр --system, 
то параметры будут читаться и сохраняться именно в этот файл.
2.Файл ~/.gitconfig или ~/.config/git/config хранит настройки 
конкретного пользователя. Этот файл используется при указании 
параметра --global.
3.Файл config в каталоге Git’а (т.е. .git/config) в том 
репозитории, который вы используете в данный момент, хранит 
настройки конкретного репозитория.
git config --global user.name <name> - установить имя пользователя
git config --local user.email <email> - установить емэйл
git remote add <remote_name> <remote_repo_url> - <remote_name> - origin
git push -u <remote_name> <local_branch_name>
# Отправить изменения на удаленный репозиторий где, 
# <remote_name> - обычно = origin, <local_branch_name> = master
	Проверка настроек
git config --list

3.1
	Текущее состояние
git log
git status -s - удобнее

4.1
.gitignore - файлы которые не нужны в репозитории(временные)
git-rm - Удаление файлов из рабочего дерева и из индекса

5.1
	Ветки
git checkout -b <имя ветки> - создаем ветку
git branch -a - вывести все ветки 
git merge <имя ветки> - скрестить ветки
git checkout <имя ветки> или <хэш> - переход по веткам

6.1 
git log -p - информация обо всех изменениях, внесенных коммитом

6.2
git stash - это команда для хранения изменений,
которые по каким-либо причинам не нужно включать в коммит.
git stash list - просмотр записей в stash
git stash pop или git stash apply - вернуться к сохр изменениям
git stash drop - удаление записей

6.3
git reset

Виды структур при работе в git:
1.рабочий каталог - это, по сути, каталог, 
	в котором ведется работа
2.индекс - это область подготовленных изменений, 
то есть те изменения, которые будут включены в коммит
3.HEAD - это указатель на состояние текущей ветки, 
то есть на последний коммит в текущей ветке

git reset --soft HEAD~ - перемещает HEAD на предыдущий коммит
git reset --mixed HEAD~ - + еще изменяет индекс
git reset --hard HEAD~ - +приведение рабочего каталога к
			  тому же виду, что и индекс

7.1
git fetch - Скачать объекты и ссылки с удалённого репозитория.
--all Скачать всё с удалённого репозитория.

git pull - Скачать и синхронизироваться с другим репозиторием 
	   или веткой.
git push - Обновить ссылки на удалённом репозитории вместе со 
		связанными объектами

Упрощенное разрешение конфликтов
git checkout --ours README.md # для отклонения всех изменений 
ветки master во всех конфликтных местах
git checkout --theirs README.md # для отклонения всех изменений
 текущей ветки во всех конфликтных местах

Ручное разрешение конфликтов
1)Удалить метки, которые добавил git;
2)Оставить одну, наиболее подходящую версию изменений.

8.1
git diff - какие изменения перед коммитом
git diff - Сравнения состояния рабочей директории и 
		последнего коммита
git diff --cached - Изменения между индексом и последним 
коммитом; т.е. то, что будет закоммичено, если вы запустите 
«git commit» без опции «-a».
git diff HEAD - Изменения в рабочем дереве с момента последнего
коммита; т.е. то, что будет закоммичено, если вы запустите  
«git commit -a»

